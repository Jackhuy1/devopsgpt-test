trigger:
- main

variables:
  ACR_NAME: terratamldacr
  IMAGE_NAME: snake-game
  K8S_NAMESPACE: default
  AZURE_SUBSCRIPTION: azure-service-connection
  AZURE_RESOURCE_GROUP: terraform-aks
  AKS_CLUSTER_NAME: terra-aks
  ACR_SERVICE_CONNECTION: acr-connection

stages:
- stage: Build
  displayName: Build Docker Image
  jobs:
  - job: Build
    container: python:3.9
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: '$(ACR_SERVICE_CONNECTION)'
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        repository: '$(ACR_NAME).azurecr.io/$(IMAGE_NAME)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(Build.BuildId)'
- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: Deploy
    environment: 'aks'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Get AKS kubeconfig'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials --resource-group $(AZURE_RESOURCE_GROUP) --name $(AKS_CLUSTER_NAME) --overwrite-existing
          - script: |
              kubectl apply -f k8s/
            displayName: 'Apply Kubernetes Manifests'
          - script: |
              kubectl set image deployment/$(IMAGE_NAME) $(IMAGE_NAME)-container=$(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(Build.BuildId) -n $(K8S_NAMESPACE)
            displayName: 'Update Deployment Image'
