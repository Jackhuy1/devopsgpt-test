trigger:
  branches:
    include:
      - main

variables:
  containerRegistry: myregistry.azurecr.io
  imageName: snake-game
  imageTag: latest
  aksResourceGroup: terraform-aks
  aksClusterName: terra-aks
  azureSubscription: azure-service-connection

stages:
  - stage: Build
    jobs:
      - job: Build_Image_And_Test
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo "Building Docker image for Snake game..."
              docker build -t $(imageName):$(imageTag) .
            displayName: 'Build Docker Image'
          - script: |
              echo "Running unit tests using pytest..."
              pytest --maxfail=1 --disable-warnings --junitxml=test-results.xml -q
            displayName: 'Run Unit Tests'
          - script: |
              echo "Saving Docker image as tar file..."
              mkdir -p $(Build.ArtifactStagingDirectory)
              docker save $(imageName):$(imageTag) -o $(Build.ArtifactStagingDirectory)/$(imageName).tar
            displayName: 'Save Docker Image'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(imageName).tar'
              artifact: 'dockerImage'
            displayName: 'Publish Docker Image Artifact'
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: 'test-results.xml'
              testRunTitle: 'Snake Game Unit Tests'
            displayName: 'Publish Test Results'

  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: Deploy_To_AKS
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Fetch AKS Kubeconfig'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Fetching Kubernetes configuration using service connection..."
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName)
          - script: |
              echo "Logging into Docker registry..."
              docker login $(containerRegistry) -u $(registryUsername) -p $(registryPassword)
            displayName: 'Docker Login'
          - script: |
              echo "Tagging and pushing Docker image..."
              docker tag $(imageName):$(imageTag) $(containerRegistry)/$(imageName):$(imageTag)
              docker push $(containerRegistry)/$(imageName):$(imageTag)
            displayName: 'Push Docker Image'
          - script: |
              echo "Creating Kubernetes secret for Docker registry credentials..."
              kubectl create secret docker-registry regcred \
                --docker-server=$(containerRegistry) \
                --docker-username=$(registryUsername) \
                --docker-password=$(registryPassword) \
                --docker-email=$(dockerEmail) \
                --dry-run=client -o yaml | kubectl apply -f -
            displayName: 'Create Kubernetes Secret'
          - script: |
              echo "Deploying to AKS using deployment manifest..."
              kubectl apply -f deployment.yml
            displayName: 'Deploy to AKS'
